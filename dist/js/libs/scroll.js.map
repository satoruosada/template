{"version":3,"sources":["libs/scroll.js"],"names":["ScrollObserver","els","cb","options","document","querySelectorAll","defaultOptions","root","rootMargin","threshold","once","Object","assign","_init","callback","entries","observer","forEach","entry","isIntersecting","target","unobserve","io","IntersectionObserver","bind","POLL_INTERVAL","el","observe","disconnect"],"mappings":";;;;;;;;IAAMA,c;AACF,0BAAYC,GAAZ,EAAiBC,EAAjB,EAAqBC,OAArB,EAA8B;AAAA;;AAC1B,SAAKF,GAAL,GAAWG,QAAQ,CAACC,gBAAT,CAA0BJ,GAA1B,CAAX;AACA,QAAMK,cAAc,GAAG;AACnBC,MAAAA,IAAI,EAAE,IADa;AAEnBC,MAAAA,UAAU,EAAE,KAFO;AAGnBC,MAAAA,SAAS,EAAE,CAHQ;AAInBC,MAAAA,IAAI,EAAE;AAJa,KAAvB;AAMA,SAAKR,EAAL,GAAUA,EAAV;AACA,SAAKC,OAAL,GAAeQ,MAAM,CAACC,MAAP,CAAcN,cAAd,EAA8BH,OAA9B,CAAf;AACA,SAAKO,IAAL,GAAY,KAAKP,OAAL,CAAaO,IAAzB;;AACA,SAAKG,KAAL;AACH;;;;WACD,iBAAQ;AAAA;;AACJ,UAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAUC,OAAV,EAAmBC,QAAnB,EAA6B;AAAA;;AAC1CD,QAAAA,OAAO,CAACE,OAAR,CAAgB,UAAAC,KAAK,EAAI;AACrB,cAAIA,KAAK,CAACC,cAAV,EAA0B;AACtB,YAAA,KAAI,CAACjB,EAAL,CAAQgB,KAAK,CAACE,MAAd,EAAsB,IAAtB;;AACA,gBAAG,KAAI,CAACV,IAAR,EAAc;AACVM,cAAAA,QAAQ,CAACK,SAAT,CAAmBH,KAAK,CAACE,MAAzB;AACH;AACJ,WALD,MAKO;AACH,YAAA,KAAI,CAAClB,EAAL,CAAQgB,KAAK,CAACE,MAAd,EAAsB,KAAtB;AACH;AACJ,SATD;AAUH,OAXD;;AAaA,WAAKE,EAAL,GAAU,IAAIC,oBAAJ,CAAyBT,QAAQ,CAACU,IAAT,CAAc,IAAd,CAAzB,EAA8C,KAAKrB,OAAnD,CAAV,CAdI,CAgBJ;;AACA,WAAKmB,EAAL,CAAQG,aAAR,GAAwB,GAAxB;AAEA,WAAKxB,GAAL,CAASgB,OAAT,CAAiB,UAAAS,EAAE;AAAA,eAAI,MAAI,CAACJ,EAAL,CAAQK,OAAR,CAAgBD,EAAhB,CAAJ;AAAA,OAAnB;AACH;;;WAED,mBAAU;AACN,WAAKJ,EAAL,CAAQM,UAAR;AACH","sourcesContent":["class ScrollObserver {\r\n    constructor(els, cb, options) {\r\n        this.els = document.querySelectorAll(els);\r\n        const defaultOptions = {\r\n            root: null,\r\n            rootMargin: \"0px\",\r\n            threshold: 0,\r\n            once: true\r\n        };\r\n        this.cb = cb;\r\n        this.options = Object.assign(defaultOptions, options);\r\n        this.once = this.options.once;\r\n        this._init();\r\n    }\r\n    _init() {\r\n        const callback = function (entries, observer) {\r\n            entries.forEach(entry => {\r\n                if (entry.isIntersecting) {\r\n                    this.cb(entry.target, true);\r\n                    if(this.once) {\r\n                        observer.unobserve(entry.target);\r\n                    }\r\n                } else {\r\n                    this.cb(entry.target, false);\r\n                }\r\n            });\r\n        };\r\n\r\n        this.io = new IntersectionObserver(callback.bind(this), this.options);\r\n\r\n        // @see https://github.com/w3c/IntersectionObserver/tree/master/polyfill\r\n        this.io.POLL_INTERVAL = 100;\r\n        \r\n        this.els.forEach(el => this.io.observe(el));\r\n    }\r\n\r\n    destroy() {\r\n        this.io.disconnect();\r\n    }\r\n}"],"file":"scroll.js"}